git init       			   --> Inicia uma nova configuração do git
git init --bare     		   --> Cria um repositório que armazenará as alterações, não os arquivos em si. Não poderá ser alterado diretamente.
git add .      			   --> Adiciona todos os arquivo alterados ao index
git commit -m  			   --> Confirma as alterações no repositório local
git remote -v  			   --> Mostra a url do repositório remoto
git remote set-url origin git@hostname:USERNAME/REPOSITORY.git --> Troca a url do servidor
git remote rename origin outro nome --> Renomeia o repositório original (derivado do clone), para um nome qualquer que o identifique melhor
git remote add origin https://github.com/dauanylessa/alura-git.git  --Adicionando um novo repositório.
git branch 			   --> List as branchs locais
git branch -r		 	   --> List as branchs remotas
git branch [Nome da branch] 	   --> Cria uma nova branch
git checkout   			   --> Alterna entre branch's
git checkout NomeBranch		   --> Alterna entre branch's
git status     			   --> Monstra a branch atual (sempre olhar antes de desenvolver)
git pull       			   --> Atualiza a branch atual com o conteúdo do servidor. 
git push       			   --> Envia as alterações para o repositório remoto
git branch -D [Nome da branch]     --> Remove uma branch
git log        			   --> Exibe o log
git log --oneline		   --> Exibe o log resumido
git log -p			   --> Exibe completo
git push origin dev	           --> Faz o push no servidor criando uma nova branch
git config --local user.name = ""  --> Configura o nome do desenvolvedor
git config --local user.email = "" --> Configura o e-mail do desenvolvedor
git config user.name		   --> Exibir o nome
git config user.email              --> Exibir o e-mail
git rm --cached index.html         --> Tira do commit realizado.
git restore index.html             --> Restaura para a versão anterior. (Antes do add - Restaura para como estava antes, considerando que ainda não colocou no stage "antes do add...").
git restore --staged index.html    --> Tira do stage (desfaz o add), para restaurar de fato, é necessário utilizar o comando anterior logo na sequencia.
git --help 			   --> Help


 

